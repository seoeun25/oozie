***************
*** 911,921 ****
       * @param logRetrievalType Based on which filter criteria the log is retrieved
       * @param logRetrievalScope Value for the retrieval type
       * @param ps Printstream of command line interface
       * @throws OozieClientException thrown if the job info could not be retrieved.
       */
-     public void getJobLog(String jobId, String logRetrievalType, String logRetrievalScope, PrintStream ps)
              throws OozieClientException {
-         new JobLog(jobId, logRetrievalType, logRetrievalScope, ps).call();
      }
  
      private class JobLog extends JobMetadata {
--- 911,922 ----
       * @param logRetrievalType Based on which filter criteria the log is retrieved
       * @param logRetrievalScope Value for the retrieval type
       * @param ps Printstream of command line interface
+      * @return the job log if the ps is null
       * @throws OozieClientException thrown if the job info could not be retrieved.
       */
+     public String getJobLog(String jobId, String logRetrievalType, String logRetrievalScope, PrintStream ps)
              throws OozieClientException {
+         return new JobLog(jobId, logRetrievalType, logRetrievalScope, ps).call();
      }
  
      private class JobLog extends JobMetadata {
***************
*** 980,997 ****
          }
      }
  
-     private class JobMetadata extends ClientCallable<String> {
-         PrintStream printStream;
  
          JobMetadata(String jobId, String metaType) {
-             super("GET", RestConstants.JOB, notEmpty(jobId, "jobId"), prepareParams(RestConstants.JOB_SHOW_PARAM,
                      metaType));
          }
  
          JobMetadata(String jobId, String logRetrievalType, String logRetrievalScope, String metaType, PrintStream ps) {
-             super("GET", RestConstants.JOB, notEmpty(jobId, "jobId"), prepareParams(RestConstants.JOB_SHOW_PARAM,
                      metaType, RestConstants.JOB_LOG_TYPE_PARAM, logRetrievalType, RestConstants.JOB_LOG_SCOPE_PARAM,
-                     logRetrievalScope));
              printStream = ps;
          }
  
--- 999,1036 ----
          }
      }
  
+     private class JobMetadata extends Metadata {
  
          JobMetadata(String jobId, String metaType) {
+             super(RestConstants.JOB, notEmpty(jobId, "jobId"), prepareParams(RestConstants.JOB_SHOW_PARAM,
                      metaType));
          }
  
          JobMetadata(String jobId, String logRetrievalType, String logRetrievalScope, String metaType, PrintStream ps) {
+             super(RestConstants.JOB, notEmpty(jobId, "jobId"), prepareParams(RestConstants.JOB_SHOW_PARAM,
                      metaType, RestConstants.JOB_LOG_TYPE_PARAM, logRetrievalType, RestConstants.JOB_LOG_SCOPE_PARAM,
+                     logRetrievalScope), ps);
+         }
+ 
+     }
+ 
+     private class ActionMetadata extends Metadata {
+ 
+         ActionMetadata(String actionId, String metaType, PrintStream ps) {
+             super(RestConstants.ACTION, notEmpty(actionId, "actionId"), prepareParams(RestConstants.ACTION_PARAM,
+                     metaType), ps);
+         }
+     }
+ 
+     private class Metadata extends ClientCallable<String> {
+         PrintStream printStream;
+ 
+         Metadata(String collection, String resource, Map<String,String> params){
+             super("GET", collection, resource, params);
+         }
+ 
+         Metadata(String collection, String resource, Map<String,String> params, PrintStream ps){
+             super("GET", collection, resource, params);
              printStream = ps;
          }
  
***************
*** 1024,1030 ****
           *
           * @param reader reader to read into a string.
           * @param maxLen max content length allowed, if -1 there is no limit.
-          * @param ps Printstream of command line interface
           * @throws IOException
           */
          private void sendToOutputStream(Reader reader, int maxLen) throws IOException {
--- 1063,1068 ----
           *
           * @param reader reader to read into a string.
           * @param maxLen max content length allowed, if -1 there is no limit.
           * @throws IOException
           */
          private void sendToOutputStream(Reader reader, int maxLen) throws IOException {
